<!--
	Imagine the following where in some kind of SDK / Helper package
	These work alongside the code in Sdk.cs
-->
<Project>
	<ItemGroup>
		<ProjectReference Update="@(ProjectReference)">
			<IsAspireContainerResource Condition="'%(IsAspireContainerResource)' != 'false'">true</IsAspireContainerResource>

			<ReferenceOutputAssembly Condition="'%(ReferenceOutputAssembly)' == '' and '%(IsAspireContainerResource)' == 'true'">false</ReferenceOutputAssembly>
			<SkipGetTargetFrameworkProperties Condition="'%(SkipGetTargetFrameworkProperties)' == '' and '%(IsAspireContainerResource)' == 'true'">true</SkipGetTargetFrameworkProperties>
			<ExcludeAssets Condition="'%(ExcludeAssets)' == '' and '%(IsAspireContainerResource)' == 'true'">all</ExcludeAssets>
			<Private Condition="'%(Private)' == '' and '%(IsAspireContainerResource)' == 'true'">false</Private>
		</ProjectReference>
	</ItemGroup>

	<PropertyGroup>
		<_AspireIntermediatePath>$(IntermediateOutputPath)obj\Aspire\</_AspireIntermediatePath>
		<_GeneratedClassNameFixupRegex>(((?&lt;=\.)|^)(?=\d)|\W)</_GeneratedClassNameFixupRegex>
	</PropertyGroup>

	<!-- 
		Relies on each project defining a `OutputComputeContainerConfig` target, which comes from `Directory.Build.targets`
		Need to work out a way to do this without additional targets
	-->
	<Target Name="_CreateAspireContainerResources">
		<MSBuild Projects="@(ProjectReference->WithMetadataValue('IsAspireContainerResource', 'true'))"
				 Targets="OutputComputeContainerConfig"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_AspireContainerProjectResource.SetConfiguration); %(_AspireContainerProjectResource.SetPlatform);"
				 ContinueOnError="!$(BuildingProject)"
				 SkipNonexistentTargets="true">
			<Output TaskParameter="TargetOutputs" ItemName="_AspireContainerResource" />
		</MSBuild>
	</Target>

	<!-- Generate the data structures for doing the codegen for project resources -->
	<Target Name="CreateAspireContainerMetadataSources"
			DependsOnTargets="_CreateAspireContainerResources">
		<ItemGroup>
			<AspireContainerMetadataSource Include="@(_AspireContainerResource->WithMetadataValue('EnableSdkContainerSupport', 'true'))" Condition="'@(_AspireContainerResource)' != ''">
				<ClassName Condition="%(_AspireContainerResource.AspireContainerMetadataTypeName) == ''">$([System.Text.RegularExpressions.Regex]::Replace($([System.IO.Path]::GetFileNameWithoutExtension(%(_AspireContainerResource.Identity))), $(_GeneratedClassNameFixupRegex), '_'))</ClassName>
				<ClassName Condition="%(_AspireContainerResource.AspireContainerMetadataTypeName) != ''">$([System.Text.RegularExpressions.Regex]::Replace(%(_AspireContainerResource.AspireContainerMetadataTypeName), $(_GeneratedClassNameFixupRegex), '_'))</ClassName>
				<ContainerRegistry>%(_AspireContainerResource.ContainerRegistry)</ContainerRegistry>
				<ContainerRepository>%(_AspireContainerResource.ContainerRepository)</ContainerRepository>
				<ContainerImageTag>%(_AspireContainerResource.ContainerImageTag)</ContainerImageTag>
			</AspireContainerMetadataSource>
		</ItemGroup>
	</Target>
	
	<Target Name="_CSharpWriteContainerMetadataSources" DependsOnTargets="CreateAspireContainerMetadataSources" Condition="'$(Language)' == 'C#'">
		<ItemGroup>
			<AspireContainerMetadataSource Update="@(AspireContainerMetadataSource)">
				<Source>
					<![CDATA[// <auto-generated/>
namespace Containers%3B

#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
[global::System.CodeDom.Compiler.GeneratedCode("Aspire.Hosting", null)]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated code.")]
[global::System.Diagnostics.DebuggerDisplay("{ContainerRepository}:{ContainerImageTag}")]

public class ]]>%(ClassName)<![CDATA[ : global::Aspire.Hosting.IProjectWithContainerMetadata 
#pragma warning restore CS8981
{
    public string ProjectPath => """]]>%(Identity)<![CDATA["""%3B
    public string ContainerRegistry => "]]>%(ContainerRegistry)<![CDATA["%3B
    public string ContainerRepository => """]]>%(ContainerRepository)<![CDATA["""%3B
    public string ContainerImageTag => """]]>$([msbuild]::ValueOrDefault(%(ContainerImageTag), 'latest'))<![CDATA["""%3B
	
	//TODO: Calculate Port Information from `ContainerPort`
}]]>
				</Source>
			</AspireContainerMetadataSource>
		</ItemGroup>

		<WriteLinesToFile File="$(_AspireIntermediatePath)references\%(AspireContainerMetadataSource.ClassName).ContainerMetadata.g.cs"
						  Overwrite="true"
						  Lines="%(AspireContainerMetadataSource.Source)"
						  Condition="%(AspireContainerMetadataSource.ClassName) != ''"
						  WriteOnlyWhenDifferent="true" />
		<ItemGroup>
			<FileWrites Include="$(_AspireIntermediatePath)references\%(AspireContainerMetadataSource.ClassName).ContainerMetadata.g.cs" />
			<Compile Include="$(_AspireIntermediatePath)references\%(AspireContainerMetadataSource.ClassName).ContainerMetadata.g.cs"
					 Condition="%(AspireContainerMetadataSource.ClassName) != ''" />
		</ItemGroup>
	</Target>


	<Target Name="_WarnOnUnsupportedLanguage" Condition="'$(Language)' != 'C#'">
		<Warning Code="ASPIRE001" Text="The '$(Language)' language isn't fully supported by Aspire - some code generation targets will not run, so will require manual authoring." HelpLink="https://aka.ms/aspire/diagnostics/aspire001" />
	</Target>


	<PropertyGroup>
		<!-- Easy extension point for adding new languages' write support. -->
		<WriteAspireContainerMetadataSourcesDependsOn>_CSharpWriteContainerMetadataSources;_WarnOnUnsupportedLanguage;</WriteAspireContainerMetadataSourcesDependsOn>
	</PropertyGroup>

	<!-- The purpose of this target is to take all of the generated container metadata and write them to the intermediate build directory
     and reference them for compilation. There will be a ClassName.ContainerMetadata.g.cs file for each referenced container. -->
	<Target Name="WriteAspireContainerMetadataSources" DependsOnTargets="$(WriteAspireContainerMetadataSourcesDependsOn)" BeforeTargets="CoreCompile" />


</Project>